AWSTemplateFormatVersion: "2010-09-09"
# This template creates a simple web application using AWS services
# such as S3, Lambda, and API Gateway.
# It includes a Lambda function that is triggered by an S3 event
# and an API Gateway endpoint that invokes the Lambda function.

Parameters:
  ImageID:
    Description: Image id 
    Type: String
    Default: ami-00a929b66ed6e0de6

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small

Resources:
  WebServerLaunchConfiguration:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebServerLaunchConfiguration
      VersionDescription: v1
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageID
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "<h1>Hello from AWS CloudFormation</h1>" > /var/www/html/index.html
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerAutoScalingGroup
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      LaunchTemplate:
        LaunchTemplateName: WebServerLaunchConfiguration
        Version: !GetAtt WebServerLaunchConfiguration.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - subnet-07c4864b7dc14d609
        - subnet-0b70935f637163924

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AppLoadBalancer
      Subnets:
        - subnet-07c4864b7dc14d609
        - subnet-0b70935f637163924
      Type: application

  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
  
  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: vpc-08f83fe90ebf666dd
      TargetType: instance


  # Cloudwatch Log Group
  HostedZoneCloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/route53/webapp
      RetentionInDays: 1

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
        DisplayName: Alerts
        TopicName: Alerts
  
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: joseayerdis@gmail.com
      Protocol: email
      TopicArn: !Ref SNSTopic

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: websample1-pozool.com
      QueryLoggingConfig:
        CloudWatchLogsLogGroupArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/route53/webapp'

  RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: HostedZone
    Properties:
      HostedZoneName: !Ref HostedZone
      Name: websample1-pozool.com.
      ResourceRecords:
        - !GetAtt AppLoadBalancer.DNSName
      TTL: '900'
      Type: CNAME

  LogPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: LogResourcePolicy
      PolicyDocument: !Sub "
        {
          \"Version\": \"2012-10-17\",
          \"Statement\": [
            {
              \"Effect\": \"Allow\",
              \"Principal\": {
                \"Service\": \"route53.amazonaws.com\"
              },
              \"Action\": [ 
                \"logs:CreateLogGroup\",
                \"logs:CreateLogStream\",
                \"logs:PutLogEvents\"
              ],
              \"Resource\": \"arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/route53/*\"
            }
          ]
        }
      "

  
